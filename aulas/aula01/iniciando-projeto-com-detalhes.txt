< BACK END >

// criar um projeto em javascript, ele é identificado pelo arquivo package.json que são informações principais do projeto, onde vai ter as dependências, sendo as bibliotecas de terceiras.

npm init -y

// dependencia de desenvolvimento, usado em ambiente desenvolvimento, logo em produção será inutil.

// node não entende javascript.

npm i typescript -D

// da a habilidade para o typescript que está em um projeto node.

npm i @types/node -D

// configurar o typescript em um projeto.

npx tsc --init

// para que serve o typescript - tipagem estatica, ou seja, definir o tipo de cada variavel no momento que ela está sendo declarada.

npm i tsx -D

// automatiza o processo converter o código de typescript para javascript.


// api restful = aplicação p/ servir dados para um front-end, conexão com bd.

// promise = algo que vai demorar acontecer no javascript.


====== ESLINT ==========

npm install eslint -D [BACK-END] 

npm i @rocketseat/eslint-config [BACK-END]

npm i prettier-plugin-tailwindcss -D, serve para organizar semanticamente as propriedades na className [FRONT-END] 

======= PRISMA ===========

// Os models servem para definir a estrutura e os relacionamentos dos dados no banco de dados.

npm i prisma -D (-D para indicar que é do desenvolvimento)

npx prisma -h

npx prisma init --datasource-provider SQLite

npx prisma migrate dev

// São arquivos que definem a estrutura e as alterações no esquema de banco de dados.

npx prisma studio

npm i @prisma/client

< FRONT END >

Componentes no react = São elementos de interface reutilizáveis que podem ser compostos para construir interfaces de usuário.

Propriedades no react = Uma forma de passar informações para dentro de um componente.

~ page.tsx
<button title="teste"/>

~ button.tsx
interface ButtonProps {
title: string;
}

export function Button(props: ButtonProps) {
return (
<p styles={styles}>
{props.title}
</p>
)
}

Expo vantagens = Facilitar o desenvolvimento de aplicativos multiplataforma.

npx create-expo-app my-app

npm i nativewind

npm i tailwindcss -D

npx tailwindcss init

* colocar esse extends no tsconfig.json     

"types": [
      "nativewind/types"
    ]

* em tailwind.config.js configurar desse jeito

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./App.tsx",
    "./app/**/*.tsx",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};



* em babel.config.js configurar desse jeito

module.exports = function(api) {
  api.cache(true);
  return {
    presets: ["babel-preset-expo"],
    plugins: ["nativewind/babel"],
  };
};

npm i eslint @rocketseat/eslint-config -D

cria o arquivo .eslintrc.json e configura

{
  "extends": [
    "@rocketseat/eslint-config/react"
  ]
}

npm i prettier-plugin-tailwindcss -D

cria o arquivo prettier.config.js  e configura

